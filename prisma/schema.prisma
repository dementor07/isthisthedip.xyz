generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  passwordHash        String        @map("password_hash")
  tier                String        @default("free")
  dailySearches       Int           @default(0) @map("daily_searches")
  totalSearches       Int           @default(0) @map("total_searches")
  lastSearchDate      DateTime?     @map("last_search_date") @db.Date
  subscriptionExpires DateTime?     @map("subscription_expires")
  stripeCustomerId    String?       @map("stripe_customer_id")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")

  // Profile fields
  username            String?       @unique @db.VarChar(30)
  displayName         String?       @map("display_name") @db.VarChar(50)
  bio                 String?       @db.VarChar(500)
  avatar              String?       @db.VarChar(255)
  location            String?       @db.VarChar(100)
  website             String?       @db.VarChar(255)
  isPublic            Boolean       @default(true) @map("is_public")
  lastSeenAt          DateTime?     @map("last_seen_at")

  // Relations
  analyses            Analysis[]
  chatMessages        ChatMessage[]
  sessions            Session[]
  sentMessages        DirectMessage[] @relation("SentMessages")
  receivedMessages    DirectMessage[] @relation("ReceivedMessages")

  @@map("users")
}

model Analysis {
  id           Int      @id @default(autoincrement())
  userId       Int?     @map("user_id")
  cryptoSymbol String   @map("crypto_symbol") @db.VarChar(10)
  cryptoName   String?  @map("crypto_name") @db.VarChar(100)
  score        Int
  signal       String   @db.VarChar(20)
  confidence   String?  @db.VarChar(20)
  priceData    Json?    @map("price_data")
  analysisData Json?    @map("analysis_data")
  ipAddress    String?  @map("ip_address")
  timestamp    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])

  @@index([cryptoSymbol])
  @@index([timestamp(sort: Desc)])
  @@index([score(sort: Desc)])
  @@map("analyses")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tokenHash String   @map("token_hash")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@index([tokenHash])
  @@index([expiresAt])
  @@map("sessions")
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  message   String   @db.VarChar(1000)
  username  String   @db.VarChar(50)
  userTier  String   @default("free") @map("user_tier") @db.VarChar(20)
  likes     Int      @default(0)
  isDeleted Boolean  @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@index([createdAt(sort: Desc)])
  @@index([userId])
  @@map("chat_messages")
}

model DirectMessage {
  id         Int      @id @default(autoincrement())
  senderId   Int      @map("sender_id")
  receiverId Int      @map("receiver_id")
  message    String   @db.VarChar(2000)
  isRead     Boolean  @default(false) @map("is_read")
  isDeleted  Boolean  @default(false) @map("is_deleted")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt(sort: Desc)])
  @@map("direct_messages")
}
