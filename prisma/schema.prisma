// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  passwordHash         String    @map("password_hash")
  tier                 String    @default("free")
  dailySearches        Int       @default(0) @map("daily_searches")
  totalSearches        Int       @default(0) @map("total_searches")
  lastSearchDate       DateTime? @map("last_search_date") @db.Date
  subscriptionExpires  DateTime? @map("subscription_expires")
  stripeCustomerId     String?   @map("stripe_customer_id")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  analyses Analysis[]
  sessions Session[]
  chatMessages ChatMessage[]

  @@map("users")
}

model Analysis {
  id           Int      @id @default(autoincrement())
  userId       Int?     @map("user_id")
  cryptoSymbol String   @map("crypto_symbol") @db.VarChar(10)
  cryptoName   String?  @map("crypto_name") @db.VarChar(100)
  score        Int
  signal       String   @db.VarChar(20)
  confidence   String?  @db.VarChar(20)
  priceData    Json?    @map("price_data")
  analysisData Json?    @map("analysis_data")
  ipAddress    String?  @map("ip_address")
  timestamp    DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([cryptoSymbol])
  @@index([timestamp(sort: Desc)])
  @@index([score(sort: Desc)])
  @@map("analyses")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tokenHash String   @map("token_hash")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([tokenHash])
  @@index([expiresAt])
  @@map("sessions")
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")  
  message   String   @db.VarChar(1000)
  username  String   @db.VarChar(50)
  userTier  String   @default("free") @map("user_tier") @db.VarChar(20)
  likes     Int      @default(0)
  isDeleted Boolean  @default(false) @map("is_deleted")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([createdAt(sort: Desc)])
  @@index([userId])
  @@map("chat_messages")
}